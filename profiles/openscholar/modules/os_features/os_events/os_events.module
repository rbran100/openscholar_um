<?php
// $Id$

include_once 'os_events.features.inc';

/**
 * Implements hook_os_app_info().
 */
function os_events_os_app_info() {
  $apps = array();

  $apps['os_events'] = array(
    'path' => 'calendar',
    'nodetypes' => array(
      'event',
    ),
    'views tabs' => array(
      'os_events' => array(
        'page_1', //Main Cal
        'page_4', //Upcoming
      ),
    ),
  );

  return $apps;
}

/**
 * hook os_widget
 *
 * Events blocks that can be used on an OpenScholar site
 */
function os_events_os_widget() {
  $items = array();

  //Mini calendar that displays events by month
  $items['views-os_events-block_1'] = array(
    'module' => 'views',
    'delta' => 'os_events-block_1',
    'region' => 'sidebar_second',
    'weight' => '-10',
    'info' => t('Mini Calendar'),
  );

  //List of upcoming events
  $items['views-os_events-block_2'] = array(
    'module' => 'views',
    'delta' => 'os_events-block_2',
    'region' => 'sidebar_second',
    'weight' => '-15',
    'info' => t('Upcoming Events'),
  );

  return $items;
}

// TODO: Remove when os_layout_get is refactored to handle widget titles better
function os_events_os_widget_alter(&$widget) {
  if ($widget['delta'] == 'os_events-block_1') {
    $widget['info'] = t('Mini Calendar');
  }
}

/**
 * Implements hook_vsite_og_node_type_info().
 */
function os_events_vsite_og_node_type_info() {
  return array(
    'event' => 'group content',
  );
}

/**
 * Implements hook_process_node().
 */
function os_events_process_node(&$variables) {
  if($variables['type'] != 'event') {
    return;
  }

  // Move the terms to the top of the node display.
  if(isset($variables['content']['og_vocabulary'])) {
    $variables['content']['og_vocabulary']['#weight'] = 0;
  }
  // Move the event date above the event description.
  if(isset($variables['content']['field_date'])) {
    $variables['content']['field_date']['#weight'] = 0;
    // Append <p></p> tags for spacing.
    if(isset($variables['content']['field_date'][0]['#markup'])) {
      $variables['content']['field_date'][0]['#markup'] .= '<p></p>';
    }
  }

  // Display the day of the event without leading zero.
  $variables['event_start']['day'] = date('j', strtotime($variables['field_date'][0]['value']));
}

/**
 * Calendar datebox preprocess.
 *
 * RE-build the links to use query strings, instead of "clean urls".
 */
function os_events_preprocess_calendar_datebox(&$vars) {
  $date = $vars['date'];
  $view = $vars['view'];
  $vars['day'] = intval(substr($date, 8, 2));
  $day_path = calendar_granularity_path($view, 'day');

  $options = array(
    'query' => array(
      'type' => 'day',
      'day' => $vars['date'],
    ),
    'absolute' => TRUE,
  );

  $vars['link'] = !empty($day_path) ? l($vars['day'], 'calendar', $options) : $vars['day'];
}

/**
 * Implements hook_views_pre_view().
 */
function os_events_views_pre_view(&$view, &$display_id, &$args) {
  if (empty($view->display_handler->display->display_options['pager']['options']['date_id'])) {
    // Not a calendar view, or a mini-calendar
    return;
  }

  if (empty($_GET['type']) || !in_array($_GET['type'], array('day', 'week', 'month', 'year'))) {
    return;
  }

  $handler = &$view->display_handler;

  if (!empty($view->display_handler->display->display_options['style_options']['mini'])) {
    // Set the default date of the mini calendar to the date the user watching.
    $format = array('year' => 'Y', 'month' => 'Y-m', 'week' => 'Y-\W', 'day' => 'Y-m-d');

    if ($_GET['type'] == 'year') {
      // The user watch a year, return him the current time.
      $time = time();
    }
    else {
      $time = strtotime($_GET[$_GET['type']]);
    }

    $view->args[0] = date($format['month'], $time);
    return;
  }

  if ($_GET['type'] != 'month') {
    $handler->set_option('style_plugin', 'calendar_style');
  }

  $values = $handler->get_option('style_options');
  $values['calendar_type'] = $_GET['type'];
  $handler->set_option('style_options', $values);

  $values = $handler->get_option('pager');
  $values['options']['date_id'] = $_GET['type'];
  $handler->set_option('pager', $values);


  $values = $handler->get_option('arguments');
  $values['date_argument']['granularity'] = $_GET['type'];
  $handler->set_option('arguments', $values);
}

/**
 * Implements hook_preprocess_date_views_pager().
 *
 * Dealing with different context of the calendar view modes.
 */
function os_events_preprocess_date_views_pager(&$variables) {
  if ($variables['plugin']->options['date_id'] == 'mini') {
    return;
  }

  // Define some variables.
  $plugin = $variables['plugin'];
  $view = $plugin->view;
  $date_info = $view->date_info;
  $next_url = &$variables['next_url'];
  $prev_url = &$variables['prev_url'];
  $granularity = !empty($date_info->calendar_type) ? $date_info->calendar_type : 'month';
  $format = array('year' => 'Y', 'month' => 'Y-m', 'week' => 'Y-\W', 'day' => 'Y-m-d');

  // Get information about dates.
  $min_date = $date_info->min_date;

  $prev_date = clone($min_date);
  $next_date = clone($min_date);

  $prev_date->modify('-1 ' . $granularity);
  $next_date->modify('+1 ' . $granularity);

  switch ($granularity) {
    case 'week':
      $next_week = date_week(date_format($next_date, 'Y-m-d'));
      $prev_week = date_week(date_format($prev_date, 'Y-m-d'));
      $next_arg = date_format($next_date, $format[$granularity]) . date_pad($next_week);
      $prev_arg = date_format($prev_date, $format[$granularity]) . date_pad($prev_week);
      break;
    default:
      $next_arg = date_format($next_date, $format[$granularity]);
      $prev_arg = date_format($prev_date, $format[$granularity]);
  }

  // Change the link URL and arguments.
  $variables['next_options']['query'] = array($granularity => $next_arg, 'type' => $granularity);
  $variables['prev_options']['query'] = array($granularity => $prev_arg, 'type' => $granularity);
  $next_url = $_GET['q'];
  $prev_url = $_GET['q'];
}

/**
 * Implements hook_url_outbound_alter().
 *
 * Change the url of the prev and next links.
 */
function os_events_url_outbound_alter(&$path, &$options, $original_path) {
  $view_modes = array(
    'calendar/week',
    'calendar/day',
    'calendar/year',
  );

  if (!in_array($original_path, $view_modes) && strpos($path, 'calendar/month/') === FALSE) {
    return;
  }

  $mini_calendar = strpos($path, 'calendar/month/') !== FALSE;
  $data = explode('/', $original_path);
  $path = $data[0];

  $format = array('year' => 'Y', 'month' => 'Y-m', 'week' => 'Y-\W', 'day' => 'Y-m-d');
  $date_format = new DateTime;

  if (isset($_GET[$data[1]])) {
    if ($_GET['type'] == 'year') {
      // The user watch in a year, return him to the first day of the year.
      $time = mktime(12, 0, 0, 1, 1, $_GET[$data[1]]);
    }
    else {
      $time = strtotime($_GET[$data[1]]);
    }
    $date_format->setTimestamp($time);
  }

  if ($data[1] == 'week') {
    $date = date_format($date_format, $format[$data[1]]) . date_week(date_format($date_format, 'Y-m-d'));
  }
  else {
    $date = date_format($date_format, $format[$data[1]]);
  }

  $type = $data[1];

  if ($mini_calendar) {
    $type = 'month';
    $date = $data[2];
  }

  $options['query'] = array(
    'type' => $type,
    $data[1] => $date,
  );
}

/**
 * Implements hook_preprocess_menu_local_task().
 *
 * Remove the active from any tab in the calendar page and add active to the
 * correct tab.
 */
function os_events_preprocess_menu_local_task(&$variables) {
  if ($_GET['q'] != 'calendar' || !isset($_GET['type'])) {
    return;
  }
  $element = &$variables['element'];
  $element['#active'] = FALSE;

  $cases = array(
    'day' => 'calendar/day',
    'week' => 'calendar/week',
    'year' => 'calendar/year',
    'month' => 'calendar/month',
  );

  if (isset($cases[$_GET['type']]) && $cases[$_GET['type']] == $element['#link']['path']) {
    $element['#active'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_link().
 *
 * Remove the active from any link in the calendar page and add active class to
 * the correct link.
 */
function os_events_preprocess_link(&$variables) {
  if ($_GET['q'] != 'calendar') {
    return;
  }

  if ($variables['path'] == 'calendar' && $variables['text'] == t('Month')) {
    // The user watch different view modes of the calendar, remove the active
    // from the the month link.
    if (!in_array($_GET, array('day', 'week', 'year')) && !empty($_GET['type'])) {
      $key = array_search('active', $variables['options']['attributes']['class']);
      unset($variables['options']['attributes']['class'][$key]);
    }
  }

  $view_modes = array(
    'calendar/week',
    'calendar/day',
    'calendar/year',
  );

  if (empty($_GET['type']) || !in_array($variables['path'], $view_modes)) {
    return;
  }

  $cases = array(
    'day' => 'calendar/day',
    'week' => 'calendar/week',
    'year' => 'calendar/year',
    'month' => 'calendar/month',
  );

  if (isset($cases[$_GET['type']]) && $cases[$_GET['type']] == $variables['path']) {
    $variables['options']['attributes']['class'][] = 'active';
  }
}
