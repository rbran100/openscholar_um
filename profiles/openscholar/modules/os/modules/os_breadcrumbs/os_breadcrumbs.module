<?php
/**
 * @file
 * OS Breadcrumbs module file.
 */

/**
 * Function to create an array of links for breadcrumb creation.
 * @return
 *  Returns an array of links.
 */
function os_breadcrumbs_build_breadcrumbs() {
  $links = array();
  $menu_object = menu_get_object();
  $menu_active_trail = menu_get_active_trail();
  $item = menu_get_item();

  if(empty($menu_object)) {
    // Check for taxonomy.
    if($path = _os_breadcrumbs_check_taxonomy($item)) {
      $links = _os_breadcrumbs_build_taxonomy_breadcrumb($path);
    }else {
      // Load top level breadcrumbs.
      $links = _os_breadcrumbs_build_app_breadcrumb($menu_active_trail);
    }
  }else {
    // Load the app type.
    $bundle = $menu_object->type;
    switch($bundle) {
      case 'page':
      case 'book':
        $links = _os_breadcrumbs_build_subsection_breadcrumb($menu_active_trail);
        break;
      case 'class_material':
      case 'software_release':
      default:
        $links = _os_breadcrumbs_build_app_breadcrumb($menu_active_trail);
    }
  }

  return $links;
}

/**
 * Function to check for taxonomy in the path.
 */
function _os_breadcrumbs_check_taxonomy($item) {
  if(!isset($item['original_map'])) {
    return;
  }
  // Check for active feature.
  $feature = os_get_active_feature();
  if($feature) {
    $path_prefix = variable_get("os_taxonomy_app_path_{$feature->name}", strval(os_get_app_path($feature->name)));
  }
  $slice_count = isset($path_prefix) ? count(explode("/",$path_prefix)) : 0;

  // If we are in a content type or not will depend on how we check for taxonomy.
  $path_parts = array_slice($item['original_map'], $slice_count);
  if (!$path = drupal_get_normal_path(implode('/', $path_parts))) {
    return;
  }

  //Check the path prefixed with the purl if we are in a vsite
  if(module_exists('vsite') && vsite_get_vsite() && $path == implode('/', $path_parts) && strpos($path, 'taxonomy/term/') !== 0){
    array_unshift($path_parts, vsite_get_purl());
    if (!$path = drupal_get_normal_path(implode('/', $path_parts))) {
      return;
    }
  }
  if (strpos($path, 'taxonomy/term/') !== 0) {
    return;
  }

  // If we are in a context, appead the module to the path.
  if(isset($path_prefix)) {
    $path = isset($path_prefix) ? $path_prefix . '/' . $path :  $path;
  }

  return $path;
}

/**
 * Function to return an html ready string of breadcrumbs.
 * @param $links
 *  Array of l() links.
 */
function os_breadcrumbs_setup_breadcrumbs($links) {
  $space = spaces_get_space();

  // Get the breadcrumb divider variable.
  $theme_divider = theme_get_setting('breadcrumb_divider');
  if(isset($theme_divider)) {
    $breadcrumb_divider = $theme_divider;
  }else {
    // Set it to a default of /.
    $breadcrumb_divider = '&#47;';
  }

  if(isset($links) && is_array($links)) {
    // Set custom breadcrumbs
    drupal_set_breadcrumb($links);
    // Get custom breadcrumbs
    $breadcrumbs = drupal_get_breadcrumb();
    $breadcrumbs_render = '<div class="breadcrumb">'. implode(' <span>'.$breadcrumb_divider.'</span> ', $breadcrumbs) .'</div>';
  }else {
    return;
  }

  return $breadcrumbs_render;
}

/**
 * Function to build the breadcrumbs of the top level app.
 * @param $menu_active_trail
 *  Variable based off menu_active_trail().
 * @return
 *  Returns an array of links.
 */
function _os_breadcrumbs_build_app_breadcrumb($menu_active_trail) {
  $links = array();
  $last_item = end($menu_active_trail);
  foreach($menu_active_trail as $key => $menu) {
    $short_title = _os_breadcrumbs_shorten_title($menu['title']);
    if($key == (count($menu_active_trail)) - 1) {
      $links[] = '';//t(ucfirst($short_title));
    }else {
      $links[] = l(strtoupper($short_title), $menu['href']);
    }
  }
  // Node id check.
  // If there is a node, push the type ahead of the node.
  // So it reads home > publications > my publications
  // rather than home > my publications.
  if(strpos($last_item['href'],'node/') === 0) {
    if(isset($last_item['original_map'][1])) {
      $nid = $last_item['original_map'][1];
    }else {
      return;
    }
    $node = node_load($nid);

    // Both software release and class material need to retain their parent content type.
    if($node->type == 'class_material' || $node->type == 'software_release') {
      $links = _os_breadcrumbs_build_materials_breadcrumb($node, _os_breadcrumbs_get_content_type_title($node->type));
  	}else {
      $home_link = array_shift($links);
      $node_url = _os_breadcrumbs_get_content_type_url($node->type) != FALSE ? _os_breadcrumbs_get_content_type_url($node->type) : $node->type;
      if(_os_breadcrumbs_get_content_type_title($node->type) != FALSE) {
        $short_title = _os_breadcrumbs_shorten_title(_os_breadcrumbs_get_content_type_title($node->type));
        array_unshift($links, l(strtoupper($short_title),$node_url));
  	  }else {
        // Replace the _ with a space.
        $link_title = str_replace('_', ' ', $node->type);
        $short_title = _os_breadcrumbs_shorten_title($link_title);
        array_unshift($links, l(strtoupper($short_title),$node_url));
      }
      array_unshift($links, $home_link);
    }
  }

  // Check for blog archives or publication filters.
  $item = menu_get_item();
  if(isset($item) && ($item['path'] == 'blog' || (strpos($item['path'], 'publications') === 0))) {
    $map = $item['original_map'];
    if(isset($map) && count($map) > 1) {
      // Rebuild the breadcrumbs.
      $links = array();
      $links[] = l(t('HOME'),'<front>');
      switch($item['original_map'][0]) {
      	case 'blog':
          foreach($map as $key => $blog_archive) {
      	    $blog_breadcrumb_path = $blog_archive;
      	    if($blog_breadcrumb_path == 'all') {
              $blog_archive_title = 'Archive';
      	      $blog_breadcrumb_path = $item['path'] . '/' . $blog_breadcrumb_path;
            }elseif(is_numeric($blog_breadcrumb_path)) {
              $blog_archive_title = date('M Y', strtotime($blog_breadcrumb_path.'01'));
            }else {
      	      $blog_archive_title = $blog_breadcrumb_path;
            }
            $short_title = _os_breadcrumbs_shorten_title($blog_archive_title);
            if($key == (count($map)) - 1) {
              // Remove trailing page title for now.
      	      $links[] = ''; // t(ucfirst($short_title));
            }else {
              $links[] = l(strtoupper($short_title), $blog_breadcrumb_path);
            }
          }
          break;
      	case 'publications':
          // For now we only want the breadcrumb to maintain the user is in publications.
          // We won't list the filter in the breadcrumb because it produces unexpected results.
          $publicaiton_filter_array = array_slice($map,0,2);
          foreach($publicaiton_filter_array as $key => $pub_link) {
            if($key == (count($publicaiton_filter_array)) - 1) {
              // Remove trailing page title for now.
              $links[] = ''; // t(ucfirst($short_title));
            } else {
              $links[] = l(strtoupper($pub_link), $pub_link);
            }
          }
          break;
      }
    }
  }

  return $links;
}

/**
 *
 * Function to build the taxonomy links.
 * @param $menu_items
 *  Variable based off menu_get_item().
 */
function _os_breadcrumbs_build_taxonomy_breadcrumb($path) {
  $links = array();
  $prepend_taxonomy = FALSE;
  // Build the home link.
  $links[] = l(t('HOME'),'<front>');

  $terms_array = explode('/', $path);
  if(!isset($terms_array) && !is_array($terms_array)) {
    return $links;
  }
  $taxonomy_key = array_search('taxonomy', $terms_array);
  if($taxonomy_key === FALSE) {
    return $links;
  }
  if($taxonomy_key != 0) {
    $prepend_taxonomy = TRUE;
    // Build the links
    $parent_array = array_slice($terms_array, 0, $taxonomy_key);
    foreach($parent_array as $parent => $title) {
      // We need to append the content type to the terms.
      if($parent == 0) {
      	$append_paths = $title;
      }else {
        $append_paths .= '/'.$title;
      }
      $links[] = l(strtoupper($title), $append_paths);
    }
  }
  // Get the tid.
  $tid = array_pop($terms_array);
  // Load all the parent term.
  $term_hierarchy = taxonomy_get_parents_all($tid);
  // Load the vid.
  $vid = $term_hierarchy[0]->vid;
  
  $terms_ordered = array_reverse($term_hierarchy);
  foreach($terms_ordered as $key => $term) {
    $short_title = _os_breadcrumbs_shorten_title($term->name);
    if($key == (count($terms_ordered)) - 1) {
      // Remove trailing page title for now.
      $links[] = ''; // t(ucfirst($short_title));
    }else {
      $term_path = taxonomy_term_uri($term);
      // If we are in a content type, it needs to be appended onto the breadcrumb link for consistancy.
      $term_url = $prepend_taxonomy == TRUE ? $append_paths . '/' . $term_path['path'] : $term_path['path'];
      $links[] = l(strtoupper($short_title), $term_url);
    }
  }
  return $links;
}

/**
 * Function to create breadcrumb links for subsections.
 * @param $menu_active_trail
 *  Variable based off menu_active_trail().
 */
function _os_breadcrumbs_build_subsection_breadcrumb($menu_active_trail) {
  $links = array();
  foreach($menu_active_trail as $key => $menu) {
    $short_title = _os_breadcrumbs_shorten_title($menu['title']);
    if($key == (count($menu_active_trail)) - 1) {
      // Remove trailing page title for now.
      $links[] = ''; // t($short_title);
    }else {
      $links[] = l(strtoupper($short_title), $menu['href']);
    }
  }
  return $links;
}

/**
 * Function to build breadcrumbs for the class material/software release content type.
 * @param $menu_active_trail
 *  Variable based off menu_active_trail().
 */
function _os_breadcrumbs_build_materials_breadcrumb($node) {
  $node_field = '';
  $links = array();
  if(isset($node)) {
    // Build the home link.
    $links[] = l(t('HOME'),'<front>');
    // Both software release and class material need to retain their parent content type.
    if($node->type == 'class_material') {
      $node_field_type = $node->field_class['und'][0]['target_id'];
    }
    if($node->type == 'software_release') {
      $node_field_type = $node->field_software_project['und'][0]['target_id'];
    }
    // Get the parent node.
    $parent_node = node_load($node_field_type);
    // Get the parent content type and class.
    if(isset($parent_node)) {
      // Parent type.
      $parent_type = _os_breadcrumbs_get_content_type_title($parent_node->type) != FALSE ? _os_breadcrumbs_get_content_type_title($parent_node->type) : $parent_node->type;
      $short_title = _os_breadcrumbs_shorten_title($parent_type);
      $links[] = l(strtoupper($short_title),$parent_type);
      // Parent name.
      $parent_class = $parent_node->title;
      $parent_class_node = $parent_node->nid;
      $short_title = _os_breadcrumbs_shorten_title($parent_class);
      $links[] = l(strtoupper($short_title),'node/'.$parent_class_node);
    }
    // Breadcrumb title.
    $materials_title = _os_breadcrumbs_get_content_type_title($node->type) != FALSE ? _os_breadcrumbs_get_content_type_title($node->type) : $node->type;
    $materials_title = _os_breadcrumbs_shorten_title($materials_title);
    // Create the class material breadcrumb now.

    // UPDATE class material/software release FOR NOW IS NOT A LINK.  IT LINKS TO A DEAD PAGE.
    // ADD BACK TO A LINK WHEN/IF VIEW IS CREATED FOR THIS.

    //$links[] = l(strtoupper($materials_title),'node/'.$node->nid);
    $links[] = t(strtoupper($materials_title));
    $short_title = _os_breadcrumbs_shorten_title($node->title);
    // Remove trailing page title for now.
    $links[] = '';// t(strtoupper($short_title));

  }
  return $links;
}

/**
 * Function to return an array of links based of a node for it's breadcrumb trail.
 * @param $node
 *  Fully loaded node_load array.
 */
function _os_breadcrumbs_node_breadcrumbs($node) {
  $links = array();
  if(isset($node)) {
    $links[] = l(t('HOME'),'<front>');
    // Check for a book.
    if(isset($node->book)) {
      // Traversing a book for breadcrumbs had issues separating the parents.
      // Orig using book_get_flat_menu, but that returned incorrect parents in certain use cases.
      // This method uses the mlid's stored in the p1-p9 elements of the node->book array.
      // TODO: find a better method to accomplish the breadcrumbs.
      $mlid_array = array();
      for($i = 1; $i < 10; $i ++) {
        if($node->book['p'.$i] != 0) {
      	  $mlid_array[] = $node->book['p'.$i];
      	}
      }
      if(count($mlid_array > 0)) {
      	foreach($mlid_array as $mlid) {
          $book = book_link_load($mlid);
      	  $short_title = _os_breadcrumbs_shorten_title($book['link_title']);
     	  if($node->book['mlid'] == $book['mlid']) {
            // Remove trailing page title for now.
            $links[] =''; // t(ucfirst($short_title));
            break;
      	  }else {
            $links[] = l(strtoupper($short_title),$book['link_path']);
      	  }
      	}
      }
    }else {
      // Not a book, just a regular node.
      // Check for software releases or class material.
      if($node->type == 'class_material' || $node->type == 'software_release') {
        $links = _os_breadcrumbs_build_materials_breadcrumb($node);
      }else {
        // Get the node type.
        $node_type = _os_breadcrumbs_get_content_type_title($node->type) !=FALSE ? _os_breadcrumbs_get_content_type_title($node->type) : $node->type;
        // Get the parent content type link.
        $node_url = _os_breadcrumbs_get_content_type_url($node->type) != FALSE ? _os_breadcrumbs_get_content_type_url($node->type) : $node->type;
        // Parent breadcrumbs.
        $short_parent_title = _os_breadcrumbs_shorten_title($node_type);
        $links[] = l(strtoupper($short_parent_title),$node_url);
        // Last breadcrumb item.
        $short_title = _os_breadcrumbs_shorten_title($node->title);
        // Remove trailing page title for now.
        $links[] ='';// t(strtoupper($short_title));
      }
    }
  }
  return $links;
}

/**
 * Function to shorten the title by X characters.
 * @param $title
 *  String to be shortened.
 * @return
 *  Shortened string.
 */
function _os_breadcrumbs_shorten_title($title) {
  if(empty($title)) {
    return;
  }
  // Set to 125 for now, @todo: discuss best practices for long titles.
  $shorten_length = 125;
  if (strlen($title) > $shorten_length) {
    $title = wordwrap($title, $shorten_length);
    $shortened_title = substr($title, 0, strpos($title, "\n"));
    $shortened_title .= '...';
  }else {
    $shortened_title = $title;
  }
  return $shortened_title;
}

/**
 * Helper function build the breadcrumb title based off the node type path.
 * @param $node_type
 *  node->type.
 */
function _os_breadcrumbs_get_content_type_title($node_type) {
  if(!isset($node_type)) {
    return FALSE;
  }
  $apps = os_app_info();
  // Software release and class material needs to be checked seperately.
  // If not checked sep. the breadcrumb would be Home/Software/Foo/Software
  $fields_array = array(
    'software_release' => 'software release',
    'class_material' => 'class material',
  );
  foreach ($apps as $app => $info) {
    if (isset($info['nodetypes']) && is_array($info['nodetypes']) && in_array($node_type, $info['nodetypes'])) {
      // Check for software release or class material text.
      if(array_key_exists($node_type, $fields_array)) {
        $info['path'] = $fields_array[$node_type];
      }
      return $info['path'];
    }
  }
  return FALSE;
}

/**
 * Helper function to build the breadcrumb app link.
 * @param $node_type
 *  node->type.
 */
function _os_breadcrumbs_get_content_type_url($node_type) {
  if(!isset($node_type)) {
    return FALSE;
  }
  $apps = os_app_info();
  foreach ($apps as $app => $info) {
    if (isset($info['nodetypes']) && is_array($info['nodetypes']) && in_array($node_type, $info['nodetypes'])) {
      return $info['path'];
    }
  }

  return FALSE;
}

/**
 * Helper function for another module to use breadcrumbs.
 * Accepts a menu_active_trail or a node and returns the rendered breadcrumb HTML.
 * If neither are present the current menu_active_trail will be used.
 * @param $menu_active_trail
 *  (optional) array returned from the function menu_get_active_trail from drupals menu api
 * @param $node
 *  (optional) node object.
 * @return
 *  string of html breadcrumbs.
 */
function os_breadcrumbs_get_breadcrumbs($menu_active_trail = NULL, $node = NULL) {
  if(isset($menu_active_trail) && is_array($menu_active_trail)) {
    $links = _os_breadcrumbs_build_subsection_breadcrumb($menu_active_trail);
  }elseif (isset($node) && is_object($node)) {
    $links = _os_breadcrumbs_node_breadcrumbs($node);
  }else {
    $menu_active_trail = menu_get_active_trail();
    $links = _os_breadcrumbs_build_subsection_breadcrumb($menu_active_trail);
  }
  if(isset($links)) {
    return os_breadcrumbs_setup_breadcrumbs($links);
  }else {
    return;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function os_breadcrumbs_preprocess_page(&$variables) {
  $links = array();
  // Only alter public facing pages for the breadcrumbs.
  if(context_isset('context', 'os_public')) {
    $space = spaces_get_space();
    if(isset($space)) {
      $breadcrumb_show = $space->controllers->variable->get('os_breadcrumbs_show_breadcrumbs', 'space');
    }else {
      $breadcrumb_show = variable_get('os_breadcrumbs_show_breadcrumbs',1);
    }
    if(!isset($breadcrumb_show)) {
      $breadcrumb_show = 1;
    }
    $links = os_breadcrumbs_build_breadcrumbs();
    $breadcrumbs = os_breadcrumbs_setup_breadcrumbs($links);
    if(isset($breadcrumbs)) {
      // Check for users wanting to show their breadcrumbs on their frontpage.
      if(!drupal_is_front_page() && $breadcrumb_show == 0) {
        $variables['breadcrumb'] = $breadcrumbs;
      }else {
        $variables['breadcrumb'] = '';
      }
    }
  }
}

/**
 * Implements hook_cp_settings().
 */
function os_breadcrumbs_cp_settings() {
  $form = array();
  $space = spaces_get_space();
  $breadcrumb_show = variable_get('os_breadcrumbs_show_breadcrumbs',1);

  if (!empty($space)) {
    // Get the vsite_users_contact_form_anonymous varible
    $breadcrumb_show = $space->controllers->variable->get('os_breadcrumbs_show_breadcrumbs', 'space');
  }
  $form['os_breadcrumbs_show_breadcrumbs'] = array(
    'group' => array(
      '#id' => 'breadcrumbs',
      '#title' => t('Breadcrumbs'),
      '#weight' => 50,
    ),
    'form' => array(
      '#type' => 'radios',
   	  '#title' => t('Show breadcrumbs on your site?'),
      '#options' => array(t('Yes'),t('No')),
      '#default_value' => isset($breadcrumb_show) ? $breadcrumb_show : 1,
      '#description' => t('This will allow breadcrumbs to be displayed on your site.'),
    ),
  );

  return $form;
}
